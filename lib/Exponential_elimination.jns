let 0 ofcW = (ŒªA. (œâ _ : A) ‚äó ùü≠‚Çò) : (0 _ : ùòú) ‚Üí ùòú
let œâ ofcElim = (Œª_ B exp cont. let 1 exp' @ (val, unit) = exp
                                in let 1 unit' @ () = unit
                                   in cont val
                                   : B (val, unit')
                                : B exp')
                : ‚àÄ (0 A : ùòú)
                    (0 B : (0 _ : (œâ _ : A) ‚äó ùü≠‚Çò) ‚Üí ùòú)
                    (1 exp : (œâ _ : A) ‚äó ùü≠‚Çò)
                    (1 _ : (œâ val : A) ‚Üí B (val, ()))
                  . B exp
let unwrap = (ŒªA wa. ofcElim A (Œª_. A) wa (Œªx. x))
             : (0 A : U) ‚Üí (_ : ofcW A) ‚Üí A

-- Exponential of a multiplicative pair produces a multiplicative pair of exponentials
let expMultToMultExp = (ŒªA B pair. ofcElim ((1 _ : A) ‚äó B)
                                            (Œª_. (1 _ : ofcW A) ‚äó (ofcW B))
                                            pair
                                            (Œªpair'. let w _ @ (x, y) = pair'
                                                     in ((x, ()), (y, ()))
                                                     : (1 _ : ofcW A) ‚äó (ofcW B)))
                       : forall (0 A : U)
                                (0 B : U)
                                (1 _ : ofcW ((1 _ : A) ‚äó B))
                         . (1 _ : ofcW A) ‚äó (ofcW B)

-- Multiplicative pair of exponentials produces an exponential of a multiplicative pair
let multExpToExpMult = (ŒªA B pair. let 1 _ @ (x, y) = pair
                                   in ofcElim A
                                              (Œª_. ofcW ((1 _ : A) ‚äó B))
                                              x
                                              (Œªx'. ofcElim B
                                                            (Œª_. ofcW ((1 _ : A) ‚äó B))
                                                            y
                                                            (Œªy'. ((x', y'), ())))
                                   : ofcW ((1 _ : A) ‚äó B))
                       : forall (0 A : U)
                                (0 B : U)
                                (1 _ : (1 _ : ofcW A) ‚äó (ofcW B))
                         . ofcW ((1 _ : A) ‚äó B)


-- Exponential of an additive pair produces an additive pair of exponentials
let expAddToAddExp = (ŒªA B pair. ofcElim ((_ : A) & B)
                                         (Œª_. (_ : ofcW A) & (ofcW B))
                                         pair
                                         (Œªpair'. ‚ü®(fst pair', ()), (snd pair', ())‚ü©))
                     : forall (0 A : U)
                              (0 B : U)
                              (1 _ : ofcW ((_ : A) & B))
                       . (_ : ofcW A) & (ofcW B)

-- Additive pair of exponentials fails to produce an exponential of an additive pair
--let addExpToExpAdd = (ŒªA B pair. ofcElim A
--                                         (Œª_. ofcW ((_ : A) & B))
--                                         (fst pair)
--                                         (Œªx. ofcElim B
--                                                      (Œª_. ofcW ((_ : A) & B))
--                                                      (snd pair)
--                                                      (Œªy. (‚ü®x, y‚ü©, ()))))
--                     : forall (0 A : U)
--                              (0 B : U)
--                              (1 _ : (_ : ofcW A) & (ofcW B))
--                       . ofcW ((_ : A) & B)

-- Additive pair of exponentials fails to produce an exponential of an additive pair (different form)
--let addExpToExpAdd' = (ŒªA B pair. (‚ü®ofcElim A (Œª_. A) (fst pair) (Œªx. x),
--                                    ofcElim B (Œª_. B) (snd pair) (Œªy. y)‚ü©, ()))
--                      : forall (0 A : U)
--                               (0 B : U)
--                               (1 _ : (_ : ofcW A) & (ofcW B))
--                        . ofcW ((_ : A) & B)

-- Exponential of an additive union produces an additive union of exponentials
let expUnionToUnionExp = (ŒªA B union. ofcElim (A ‚äï B)
                                              (Œª_. (ofcW A) ‚äï (ofcW B))
                                              union
                                              (Œªunion'. case w _ @ union'
                                                      of { inl x ‚Üí inl (x, ());
                                                           inr y ‚Üí inr (y, ())
                                                         } : (ofcW A) ‚äï (ofcW B)))
                         : forall (0 A : U)
                                  (0 B : U)
                                  (1 _ : ofcW (A ‚äï B))
                           . (ofcW A) ‚äï (ofcW B)

-- Additive union of exponentials produces an exponential of an additive union
let unionExpToExpUnion = (ŒªA B union. case 1 _ @ union of
                                      { inl x ‚Üí ofcElim A (Œª_. ofcW (A ‚äï B)) x (Œªx'. (inl x', ()));
                                        inr y ‚Üí ofcElim B (Œª_. ofcW (A ‚äï B)) y (Œªy'. (inr y', ()))
                                      } : ofcW (A ‚äï B))
                         : forall (0 A : U)
                                  (0 B : U)
                                  (1 _ : (ofcW A) ‚äï (ofcW B))
                           . ofcW (A ‚äï B)

-- Exponential of a dependent multiplicative pair produces a dependent multiplicative pair of exponentials
let expDepMultToDepMultExp = (ŒªA B wab. ofcElim ((1 a : A) ‚äó B a)
                                        (Œª_. (1 wa : ofcW A) ‚äó ofcW (B (unwrap A wa)))
                                        wab
                                        (Œªab. let w _ @ (a, b) = ab
                                               in ((a, ()), (b, ()))
                                               : (1 wa : ofcW A) ‚äó ofcW (B (unwrap A wa))))
                             : forall (0 A : U)
                                      (0 B : (0 _ : A) ‚Üí U)
                                      (1 _ : ofcW ((1 a : A) ‚äó B a))
                               . (1 wa : ofcW A) ‚äó ofcW (B (unwrap A wa))
    
-- Dependent multiplicative pair of exponentials produces an exponential of a dependent multiplicative pair
let depMultExpToExpDepMult = (ŒªA B wawb. let 1 _ @ (wa, wb) = wawb
                                         in ofcElim A
                                                    (Œªwa'. (1 _ : ofcW (B (unwrap A wa'))) ‚Üí ofcW ((1 a : A) ‚äó B a))
                                                    wa
                                                    (Œªa wb'. ofcElim (B a)
                                                                      (Œª_. ofcW ((1 a : A) ‚äó B a))
                                                                      wb'
                                                                      (Œªb. ((a, b), ())))
                                            wb
                                         : ofcW ((1 a : A) ‚äó B a))
                             : forall (0 A : U)
                                      (0 B : (0 _ : A) ‚Üí U)
                                      (1 _ : (1 wa : ofcW A) ‚äó ofcW (B (unwrap A wa)))
                               . ofcW ((1 a : A) ‚äó B a)
    
-- Exponential of a dependent additive pair produces a dependent additive pair of exponentials
let expDepAddToDepAddExp = (ŒªA B wab. ofcElim ((a : A) & B a)
                                              (Œª_. (wa : ofcW A) & (ofcW (B (unwrap A wa))))
                                              wab
                                              (Œªab. ‚ü®(fst ab, ()), (snd ab, ())‚ü©))
                           : forall (0 A : U)
                                    (0 B : (0 _ : A) ‚Üí U)
                                    (1 _ : ofcW ((a : A) & B a))
                             . (wa : ofcW A) & (ofcW (B (unwrap A wa)))

-- Dependent additive pair of exponentials fails to produce an exponential of a dependent additive pair
--let depAddExpToExpDepAdd = (ŒªA B wawb. (‚ü®unwrap A (fst wawb)
--                                        , unwrap (B (unwrap A (fst wawb))) (snd wawb)‚ü©
--                                       , ()))
--                           : forall (0 A : U)
--                                    (0 B : (0 _ : A) ‚Üí U)
--                                    (1 _ : (wa : ofcW A) & (ofcW (B (unwrap A wa))))
--                             . ofcW ((a : A) & B a)
